names(state.hospitals) <- c("name", "mortality.rate")
# coerce values to numeric (and suppress warnings)
state.hospitals$mortality.rate <- suppressWarnings(as.numeric(state.hospitals$mortality.rate))
# remove hospitals with NAs
state.hospitals <- state.hospitals[!is.na(state.hospitals$mortality.rate), ]
# sort by hospital name
state.hospitals <- state.hospitals[order(state.hospitals$name),]
cat("Sorted by name")
print(state.hospitals)
# THEN sort by mortality rate and only save names
ranked.hospitals <- state.hospitals[order(state.hospitals$mortality.rate),]
hospital.names <- ranked.hospitals$name
# return according to the specified rank options - "best", "worst" or rank#
if(rank == "best"){
return(ranked.hospitals$name[1])
}
else if(rank == "worst"){
return(ranked.hospitals$name[length(ranked.hospitals$name)])
}
else {
return(ranked.hospitals$name[rank])
}
}
rankhospital("LA", "heart attack")
rm(list = ls())
# get data
all_outcomes <- read.csv("../Wk1/outcome-of-care-measures.csv", colClasses = "character")
# get states
require(datasets)
data(state)
# function to check whether state is wrong
wrong.state <- function(abb){
count <- sapply(state.abb, function(x) x == abb)
ifelse(sum(count) < 1, return(T), return(F))
}
# function to check whether outcome is wrong
wrong.outcome <- function(outc){
count <- sapply(c("heart attack", "heart failure", "pneumonia"),
function(x) x == outc)
ifelse(sum(count) < 1, return(T), return(F))
}
#function to check whether the rank is wrong
wrong.rank <- function(r){
if(r == "best" | r == "worst" | (class(r) == "numeric" & length(r) == 1)){
return(F)
}
else{
return(T)
}
}
# function to find the best hospital for a given state and outcome
rankhospital <- function(state, outcome, rank = "best"){
if((wrong.state(state) & wrong.outcome(outcome) & wrong.rank(rank))){
stop("invalid state, outcome and rank")
}
else if(wrong.state(state) & wrong.outcome(outcome)){
stop("invalid state and outcome")
}
else if(wrong.state(state) & wrong.rank(rank)){
stop("invalid state and rank")
}
else if(wrong.outcome(outcome) & wrong.rank(rank)){
stop("invalid rank and outcome")
}
else if(wrong.rank(rank)){
stop("invalid rank")
}
else if(wrong.state(state)){
stop("invalid state")
}
else if(wrong.outcome(outcome)){
stop("invalid outcome")
}
if(outcome == "heart attack") column.number <- 11
if(outcome == "heart failure") column.number <- 17
if(outcome == "pneumonia") column.number <- 23
hosp.name <- 2
# get all hospitals from that state AND only the name and outcome column
state.hospitals <- all_outcomes[all_outcomes$State == state,c(hosp.name, column.number)]
names(state.hospitals) <- c("name", "mortality.rate")
# coerce values to numeric (and suppress warnings)
state.hospitals$mortality.rate <- suppressWarnings(as.numeric(state.hospitals$mortality.rate))
# remove hospitals with NAs
state.hospitals <- state.hospitals[!is.na(state.hospitals$mortality.rate), ]
# sort by hospital name
state.hospitals <- state.hospitals[order(state.hospitals$name),]
# THEN sort by mortality rate and only save names
ranked.hospitals <- state.hospitals[order(state.hospitals$mortality.rate),]
hospital.names <- ranked.hospitals$name
# return according to the specified rank options - "best", "worst" or rank#
if(rank == "best"){
return(ranked.hospitals$name[1])
}
else if(rank == "worst"){
return(ranked.hospitals$name[length(ranked.hospitals$name)])
}
else {
return(ranked.hospitals$name[rank])
}
}
rankhospital("CT", "heart attack")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attacke", "worst")
rankhospital("MD", "heart attack", "worst")
getwd()
ebola.genome <- read.table("KM034562v1.fa")
View(ebola.genome)
str(ebola.genome)
head(ebola.genome)
ebola.genome <- read.table("KM034562v1.fa", header = T)
str(ebola.genome)
head(ebola.genome)
names(ebola.genome)
names(ebola.genome) <- "Genome Rows"
str(ebola.genome)
length(ebola.genome)
table(ebola.genome)
tail(ebola.genome)
class(ebola.genome[1])
ebola.genome[1:4]
ebola.genome[1:4,]
ebola.genome[1:4,1]
class(ebola.genome[1:4,1])
factor(ebola.genome)
str(ebola.genome)
sapply(ebola.genome[1:3,],cbind)
s <- sapply(ebola.genome[1:3,],cbind)
s
s <- lapply(ebola.genome[1:3,],cbind)
s
ebola.genome[1,1][1]
ebola.genome[1,1]
ebola.genome[1,]
ebola.genome[1]
ebola.genome[1,]
ebola.genome[1,][1,1]
ebola.genome[1,][,1]
as.vector(ebola.genome, mode = "character")
as.vector(ebola.genome)
c <- as.vector(ebola.genome)
c
names(c)
c[1]
c[1][1]
length(c)
class(c)
c <- as.vector(ebola.genome[,1])
class(c)
c[1]
c
class(c)
c <- as.vector(ebola.genome[,1], mode mode = "character")
genome.str <- as.vector(ebola.genome[,1], mode mode = "character")
genome.str <- as.vector(ebola.genome[,1], mode = "character")
genome.str <- as.vector(ebola.genome, mode = "character")
genome.str <- as.vector(ebola.genome[,1], mode = "character")
genome.str <- t(genome.str)
genome.str
head(genome.str)
genome.str <- as.vector(ebola.genome[,1], mode = "character")
length(genome.str)
genome.str <- sapply(geno, paste,collapse=T)
genome.str <- sapply(genome.str, paste,collapse=T)
genome.str <- sapply(genome.str, paste,collapse="")
genome.str
length(genome.str)
genome.str[1]
genome.str[1:4]
genome.str <- as.vector(ebola.genome[,1], mode = "character")
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
genome.str <- sapply(genome.str, paste,collapse="")
genome.str[1:4]
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
genome.str <- sapply(genome.rows, paste,collapse="")
genome.str[1:4]
names(genome.str)
sapply(genome.rows[1:2], paste,collapse="")
sapply(genome.rows[1:2,], paste,collapse="")
sapply(genome.rows[1:2,1], paste,collapse="")
paste(genome.rows[1:2], collapse = "")
vapply(genome.rows[1:2], paste,"")
sapply(genome.rows[1:2], paste,"")
a <- sapply(genome.rows[1:2], paste,"")
length(a)
names(genome.rows)
# remove names
names(genome.rows)
genome.rows
class(genome.rows)
a <- sapply(genome.rows[c(1:3)], paste,"")
length(a)
a
a <- sapply(genome.rows[1,2], paste,"")
length(genome.rows)
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
genome.str
genome.str[1]
genome.str[1][1]
length(genome.str)
substr(genome.str, 1:1)
substr(genome.str, 1,1)
?strsplit
strsplit(genome.str)
strsplit(genome.str, split = 1)
sp <- strsplit((genome.str, split = 0))
strsplit(genome.str, '')
x <- "Batsirai"
strsplit(x)
strsplit(x,0)
strsplit(x," ")
strsplit(x,"")
strsplit(x,NULL)
unlist(strsplit(x, NULL))
nucleotides <- unlist(strsplit(genome.str, split = NULL))
tail(genome.rows)
tail(nucleotides)
length(nucleotides)
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
rm(list = ls())
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
# look at the data
str(ebola.genome)
head(ebola.genome)
tail(ebola.genome)
# need to join genome into one string then chop up genome to
# individual nucleotides
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
estimateAbundance <- function(genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
barplot(abundances,
col = rainbow(length((abundances)))
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
rm(list = ls())
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
# look at the data
str(ebola.genome)
head(ebola.genome)
tail(ebola.genome)
# need to join genome into one string then chop up genome to
# individual nucleotides
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
estimateAbundance <- function(genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
barplot(abundances,
col = rainbow(length(abundances))
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
rm(list = ls())
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
# look at the data
str(ebola.genome)
head(ebola.genome)
tail(ebola.genome)
# need to join genome into one string then chop up genome to
# individual nucleotides
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
estimateAbundance <- function(genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
barplot(abundances,
col = rainbow(length(abundances)),
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
rm(list = ls())
estimateAbundance <- function(genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
# plot barplots
barplot(abundances,
col = rainbow(length(abundances)),
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
estimateAbundance <- function(genome = ebola.genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
# plot barplots
barplot(abundances,
col = rainbow(length(abundances)),
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
estimateAbundance()
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
estimateAbundance <- function(genome = ebola.genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
# plot barplots
barplot(abundances,
col = rainbow(length(abundances)),
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
estimateAbundance()
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
estimateAbundance <- function(genome = ebola.genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
genome.str <- vector("character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
# plot barplots
barplot(abundances,
col = rainbow(length(abundances)),
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
estimateAbundance()
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
estimateAbundance <- function(genome = ebola.genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
genome.str <- vector("character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
print(abundances)
# plot barplots
barplot(abundances,
col = rainbow(length(abundances)),
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
estimateAbundance()
estimateAbundance(,"T")
estimateAbundance("T")
estimateAbundance(,c("T", "G"))
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
estimateAbundance <- function(genome = ebola.genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
genome.str <- vector("character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
# plot barplots
barplot(abundances,
col = rainbow(length(abundances)),
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
return(abundances)
}
estimateAbundance(,c("T", "G"))
estimateAbundance(,c("T", "G", "C"))
# get genome and avoid title with header = T
ebola.genome <- read.table("KM034562v1.fa", header = T)
estimateAbundance <- function(genome = ebola.genome, nucleotide = c("A", "T", "C", "G")){
abundances <- vector("numeric",length(nucleotide))
names(abundances) <- nucleotide
# first convert to character vector
genome.rows <- as.vector(ebola.genome[,1], mode = "character")
genome.str <- vector("character")
# join into one string
for(i in 1:length(genome.rows)){
genome.str <- paste(genome.str,genome.rows[i], collapse = '')
}
# split into individual nucleotides and return it as a vector
ebola.nucleotides <- unlist(strsplit(genome.str, split = NULL))
for(i in 1:length(nucleotide)){
abundances[i] = sum(ebola.nucleotides == nucleotide[i])
}
# plot barplots
if(length(abundances) > 1){
barplot(abundances,
col = rainbow(length(abundances)),
main = "Abundance of Nucleotides in Ebola Virus Genome",
xlab = "Nucleotide",
ylab = "Abundance")
}
return(abundances)
}
estimateAbundance(,c("T", "G"))
estimateAbundance(,c("T"))
estimateAbundance(,c("T", "G", "A"))
expand.grid(c("A","B","C"))
comb(c("A","B","C"),3)
combn(c("A","B","C"),3)
getwd()
load(file = "zikaGenome.RData")
load(file = "zikaGenome.RData")
k.length.motifs <- table(getAllKMersOfSize(5))
?sample
swirl()
require(swirl)
swirl()
swirl()
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Batsi
swirl()
swirl()
plot(child ~ parent, galton)
main()
main()
info()
main()
